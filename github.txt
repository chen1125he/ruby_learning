1.本地和远程不版本不同
	本地覆盖$ git push -u origin master -f  #origin是本地名
	远程覆盖本地$ git pull origin master
	
2.右键git bash => git init 命令新建git仓库

3.在项目根目录下的.gitignore可以选择不被提交的文件，已经存在于远程仓库的文件是不能被ignore的
	# See https://help.github.com/articles/ignoring-files for more about ignoring files.
	#
	# If you find yourself ignoring temporary files generated by your text editor
	# or operating system, you probably want to add a global ignore instead:
	#   git config --global core.excludesfile '~/.gitignore_global'

	# Ignore bundler config.
	/.bundle

	# Ignore the default SQLite database.
	/db/*.sqlite3
	/db/*.sqlite3-journal

	# Ignore all logfiles and tempfiles.
	/log/*
	/tmp/*
	!/log/.keep
	!/tmp/.keep

	# Ignore Byebug command history file.
	.byebug_history
	/csv_import_dir/*
	/db/schema.rb
	
4.git pr
	git checkout branch # 切换到分支，可以在这个分支下工作，修改代码
	git checkout -b my_branch # 新建并切换到这个分支
	git add xxxx
	git commit -m ''
	git push master my_branch # 提交自己修改的分支
	# 然后可以进github上建立一个pull request
	最后删除自己刚刚建立的分支
	git branch -d my_branch
	https://blog.csdn.net/u010857876/article/details/79035876
5.git clone -b master url
	obuntu => please make sure you have the correct access rights and repository exists
	https://github.com/jakubroztocil/cloudtunes/issues/23   https://github.com/settings/ssh
	https://git-scm.com/book/pl/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key
	$ cd ~/.ssh
	$ ssh-keygen
	$ # enter password => pub 生成
	$ cat ~/.ssh/id_rsa.pub # 可以查看生成的密钥内容
	
6. git代码提交流程
	先checkout 到develop, 如果是因为已经修改过了代码导致无法切换, 则先commit
	然后git pull --rebase 获取远程代码
	再checkout自己要提交的分支 git add . -> git rebase develop -> 解决冲突 -> git rebase --continue
	rebase完想再提交代码的时候出现了更新被拒绝，因为当前分支落后于其对应的远程分支，这时应该在当前分支 git pull --rebase